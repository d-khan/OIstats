temp_x = as.numeric(strsplit(as.character(x), "")[[1]])
temp_y = as.numeric(strsplit(as.character(y), "")[[1]])
len = length(temp_x)
a = temp_x[1:(len/2)]
b = temp_x[(len/2)+1:(len-len/2)]
c = temp_y[1:(len/2)]
d = temp_y[(len/2)+1:(len
-len/2)]
a = as.integer(paste(a,collapse = ''))
b = as.integer(paste(b,collapse = ''))
c = as.integer(paste(c,collapse = ''))
d = as.integer(paste(d,collapse = ''))
a = as.bigq(a)
b = as.bigq(b)
c = as.bigq(c)
d = as.bigq(d)
p = as.integer()
q = as.integer()
ac = as.integer()
bd = as.integer()
pq = as.integer()
as.bigq(p)
as.bigq(q)
as.bigq(ac)
as.bigq(bd)
as.bigq(pq)
as.bigq(adbc)
if ((x < 10) | (y < 10)) {return (x*y)}
p = a+b
q = c+d
ac = ksuba(a,c)
bd = ksuba(b,d)
pq = ksuba(p,q)
adbc = (p*q)-(a*c)-(b*d)
return ((10^len*a*c) + (10^(len/2)*adbc) + (b*d))
}
ksuba(12345678123456781234567812345678,12345678123456781234567812345678)
t = as.bigq(t)
class(t)
rm(t)
t = as.integer()
as.big(t)
as.bigq(t)
class(t)
t = as.bigq(t)
class(t)
t = 2147483648
class(t)
t = 2147483648L
t
class(t)
t = 2147483647L
class(t)
t = 2147483647L + 1L
t = 2147483647L
t = as.bigq(t)
class(t)
t = 2147483647L +1L
class(t)
as.bigq(t)
t = 2147483647L +1L
class(t)
t = 2147483647+1
class(t)
as.bigq(t)
class(t)
t = 2147483647+10
class(t)
t = 2147483647+214754733244
t
class(t0)
class(t)
as.bigq(t)
t
rm(t)
as.big(t)
as.bigq(t)
t = as.integer()
as.bigq(t
)
t = 2147483649
t = 2147483649+10
t
class(t)
library(microbenchmark)
library(gmp)
ksuba = function(x,y) {
temp_x = as.numeric(strsplit(as.character(x), "")[[1]])
temp_y = as.numeric(strsplit(as.character(y), "")[[1]])
len = length(temp_x)
a = temp_x[1:(len/2)]
b = temp_x[(len/2)+1:(len-len/2)]
c = temp_y[1:(len/2)]
d = temp_y[(len/2)+1:(len
-len/2)]
a = as.integer(paste(a,collapse = ''))
b = as.integer(paste(b,collapse = ''))
c = as.integer(paste(c,collapse = ''))
d = as.integer(paste(d,collapse = ''))
x = as.integer()
y = as.integer()
as.bigq(x)
as.bigq(a)
as.bigq(b)
as.bigq(c)
as.bigq(d)
as.integer()
q = as.integer()
ac = as.integer()
bd = as.integer()
pq = as.integer()
as.bigq(p)
as.bigq(q)
as.bigq(ac)
as.bigq(bd)
as.bigq(pq)
as.bigq(adbc)
if ((x < 10) | (y < 10)) {return (x*y)}
p = a+b
q = c+d
ac = ksuba(a,c)
bd = ksuba(b,d)
pq = ksuba(p,q)
adbc = (p*q)-(a*c)-(b*d)
return ((10^len*a*c) + (10^(len/2)*adbc) + (b*d))
}
ksuba(12345678123456781234567812345678,12345678123456781234567812345678)
library(microbenchmark)
library(gmp)
ksuba = function(x,y) {
temp_x = as.numeric(strsplit(as.character(x), "")[[1]])
temp_y = as.numeric(strsplit(as.character(y), "")[[1]])
len = length(temp_x)
a = temp_x[1:(len/2)]
b = temp_x[(len/2)+1:(len-len/2)]
c = temp_y[1:(len/2)]
d = temp_y[(len/2)+1:(len
-len/2)]
a = as.integer(paste(a,collapse = ''))
b = as.integer(paste(b,collapse = ''))
c = as.integer(paste(c,collapse = ''))
d = as.integer(paste(d,collapse = ''))
x = as.integer()
y = as.integer()
x = as.bigq(x)
y = as.bigq(y)
a = as.bigq(a)
b = as.bigq(b)
c = as.bigq(c)
d = as.bigq(d)
p = as.integer()
q = as.integer()
p = as.bigq(p)
q = as.bigq(q)
ac = as.integer()
bd = as.integer()
pq = as.integer()
ac = as.bigq(ac)
bd = as.bigq(bd)
bd = as.bigq(pq)
adbc = as.bigq(adbc)
if ((x < 10) | (y < 10)) {return (x*y)}
p = a+b
q = c+d
ac = ksuba(a,c)
bd = ksuba(b,d)
pq = ksuba(p,q)
adbc = (p*q)-(a*c)-(b*d)
return ((10^len*a*c) + (10^(len/2)*adbc) + (b*d))
}
ksuba(12345678123456781234567812345678,12345678123456781234567812345678)
library(microbenchmark)
library(gmp)
ksuba = function(x,y) {
temp_x = as.numeric(strsplit(as.character(x), "")[[1]])
temp_y = as.numeric(strsplit(as.character(y), "")[[1]])
len = length(temp_x)
a = temp_x[1:(len/2)]
b = temp_x[(len/2)+1:(len-len/2)]
c = temp_y[1:(len/2)]
d = temp_y[(len/2)+1:(len
-len/2)]
a = as.integer(paste(a,collapse = ''))
b = as.integer(paste(b,collapse = ''))
c = as.integer(paste(c,collapse = ''))
d = as.integer(paste(d,collapse = ''))
as.bigz(x)
as.bigz(y)
if ((x < 10) | (y < 10)) {return (x*y)}
p = a+b
q = c+d
ac = ksuba(a,c)
bd = ksuba(b,d)
pq = ksuba(p,q)
adbc = (p*q)-(a*c)-(b*d)
return ((10^len*a*c) + (10^(len/2)*adbc) + (b*d))
}
ksuba(1234567812345678,1234567812345678)
library(microbenchmark)
library(gmp)
ksuba = function(x,y) {
temp_x = as.numeric(strsplit(as.character(x), "")[[1]])
temp_y = as.numeric(strsplit(as.character(y), "")[[1]])
len = length(temp_x)
a = temp_x[1:(len/2)]
b = temp_x[(len/2)+1:(len-len/2)]
c = temp_y[1:(len/2)]
d = temp_y[(len/2)+1:(len
-len/2)]
a = as.integer(paste(a,collapse = ''))
b = as.integer(paste(b,collapse = ''))
c = as.integer(paste(c,collapse = ''))
d = as.integer(paste(d,collapse = ''))
as.bigz(x)
as.bigz(y)
as.bigz(pq)
as.bigz(ac)
as.bigz(bd)
if ((x < 10) | (y < 10)) {return (x*y)}
p = a+b
q = c+d
ac = ksuba(a,c)
bd = ksuba(b,d)
pq = ksuba(p,q)
adbc = (p*q)-(a*c)-(b*d)
return ((10^len*a*c) + (10^(len/2)*adbc) + (b*d))
}
ksuba(1234567812345678,1234567812345678)
library(microbenchmark)
library(gmp)
ksuba = function(x,y) {
temp_x = as.numeric(strsplit(as.character(x), "")[[1]])
temp_y = as.numeric(strsplit(as.character(y), "")[[1]])
len = length(temp_x)
a = temp_x[1:(len/2)]
b = temp_x[(len/2)+1:(len-len/2)]
c = temp_y[1:(len/2)]
d = temp_y[(len/2)+1:(len
-len/2)]
a = as.integer(paste(a,collapse = ''))
b = as.integer(paste(b,collapse = ''))
c = as.integer(paste(c,collapse = ''))
d = as.integer(paste(d,collapse = ''))
as.bigz(x)
as.bigz(y)
pq = as.integer()
as.bigz(pq)
as.bigz(ac)
as.bigz(bd)
if ((x < 10) | (y < 10)) {return (x*y)}
p = a+b
q = c+d
ac = ksuba(a,c)
bd = ksuba(b,d)
pq = ksuba(p,q)
adbc = (p*q)-(a*c)-(b*d)
return ((10^len*a*c) + (10^(len/2)*adbc) + (b*d))
}
ksuba(1234567812345678,1234567812345678)
library(microbenchmark)
library(gmp)
ksuba = function(x,y) {
temp_x = as.numeric(strsplit(as.character(x), "")[[1]])
temp_y = as.numeric(strsplit(as.character(y), "")[[1]])
len = length(temp_x)
a = temp_x[1:(len/2)]
b = temp_x[(len/2)+1:(len-len/2)]
c = temp_y[1:(len/2)]
d = temp_y[(len/2)+1:(len
-len/2)]
a = as.integer(paste(a,collapse = ''))
b = as.integer(paste(b,collapse = ''))
c = as.integer(paste(c,collapse = ''))
d = as.integer(paste(d,collapse = ''))
as.bigz(x)
as.bigz(y)
pq = as.integer()
as.bigz(pq)
ac = as.integer()
as.bigz(ac)
bd = as.integer()
as.bigz(bd)
if ((x < 10) | (y < 10)) {return (x*y)}
p = a+b
q = c+d
ac = ksuba(a,c)
bd = ksuba(b,d)
pq = ksuba(p,q)
adbc = (p*q)-(a*c)-(b*d)
return ((10^len*a*c) + (10^(len/2)*adbc) + (b*d))
}
ksuba(1234567812345678,1234567812345678)
library(microbenchmark)
library(gmp)
ksuba = function(x,y) {
temp_x = as.numeric(strsplit(as.character(x), "")[[1]])
temp_y = as.numeric(strsplit(as.character(y), "")[[1]])
len = length(temp_x)
a = temp_x[1:(len/2)]
b = temp_x[(len/2)+1:(len-len/2)]
c = temp_y[1:(len/2)]
d = temp_y[(len/2)+1:(len
-len/2)]
a = as.integer(paste(a,collapse = ''))
b = as.integer(paste(b,collapse = ''))
c = as.integer(paste(c,collapse = ''))
d = as.integer(paste(d,collapse = ''))
if ((x < 10) | (y < 10)) {return (x*y)}
p = a+b
q = c+d
ac = ksuba(a,c)
bd = ksuba(b,d)
pq = ksuba(p,q)
adbc = (p*q)-(a*c)-(b*d)
return ((10^len*a*c) + (10^(len/2)*adbc) + (b*d))
}
ksuba(123456,123456)
123456*123456
library(microbenchmark)
library(gmp)
ksuba = function(x,y) {
if ((x < 10) | (y < 10)) {return (x*y)}
temp_x = as.numeric(strsplit(as.character(x), "")[[1]])
temp_y = as.numeric(strsplit(as.character(y), "")[[1]])
len = length(temp_x)
a = temp_x[1:(len/2)]
b = temp_x[(len/2)+1:(len-len/2)]
c = temp_y[1:(len/2)]
d = temp_y[(len/2)+1:(len
-len/2)]
a = as.integer(paste(a,collapse = ''))
b = as.integer(paste(b,collapse = ''))
c = as.integer(paste(c,collapse = ''))
d = as.integer(paste(d,collapse = ''))
p = a+b
q = c+d
ac = ksuba(a,c)
bd = ksuba(b,d)
pq = ksuba(p,q)
adbc = (p*q)-(a*c)-(b*d)
return ((10^len*a*c) + (10^(len/2)*adbc) + (b*d))
}
ksuba(123456,123456)
library(microbenchmark)
library(gmp)
ksuba = function(x,y) {
#if ((x < 10) | (y < 10)) {return (x*y)}
temp_x = as.numeric(strsplit(as.character(x), "")[[1]])
temp_y = as.numeric(strsplit(as.character(y), "")[[1]])
len = length(temp_x)
a = temp_x[1:(len/2)]
b = temp_x[(len/2)+1:(len-len/2)]
c = temp_y[1:(len/2)]
d = temp_y[(len/2)+1:(len-len/2)]
a = as.integer(paste(a,collapse = ''))
b = as.integer(paste(b,collapse = ''))
c = as.integer(paste(c,collapse = ''))
d = as.integer(paste(d,collapse = ''))
p = a+b
q = c+d
ac = ksuba(a,c)
bd = ksuba(b,d)
pq = ksuba(p,q)
adbc = (p*q)-(a*c)-(b*d)
return ((10^len*a*c) + (10^(len/2)*adbc) + (b*d))
}
ksuba(123456,123456)
library(microbenchmark)
library(gmp)
ksuba = function(x,y) {
if ((x < 10) | (y < 10)) {return (x*y)}
temp_x = as.numeric(strsplit(as.character(x), "")[[1]])
temp_y = as.numeric(strsplit(as.character(y), "")[[1]])
len = length(temp_x)
a = temp_x[1:(len/2)]
b = temp_x[(len/2)+1:(len-len/2)]
c = temp_y[1:(len/2)]
d = temp_y[(len/2)+1:(len-len/2)]
a = as.integer(paste(a,collapse = ''))
b = as.integer(paste(b,collapse = ''))
c = as.integer(paste(c,collapse = ''))
d = as.integer(paste(d,collapse = ''))
p = a+b
q = c+d
ac = ksuba(a,c)
bd = ksuba(b,d)
pq = ksuba(p,q)
adbc = (p*q)-(a*c)-(b*d)
return ((10^len*a*c) + (10^(len/2)*adbc) + (b*d))
}
ksuba(1234,1234)
library(microbenchmark)
library(gmp)
ksuba = function(x,y) {
if ((x < 10) | (y < 10)) {return (x*y)}
temp_x = as.numeric(strsplit(as.character(x), "")[[1]])
temp_y = as.numeric(strsplit(as.character(y), "")[[1]])
len = length(temp_x)
a = temp_x[1:(len/2)]
b = temp_x[(len/2)+1:(len-len/2)]
c = temp_y[1:(len/2)]
d = temp_y[(len/2)+1:(len-len/2)]
a = as.integer(paste(a,collapse = ''))
b = as.integer(paste(b,collapse = ''))
c = as.integer(paste(c,collapse = ''))
d = as.integer(paste(d,collapse = ''))
p = a+b
q = c+d
ac = ksuba(a,c)
bd = ksuba(b,d)
pq = ksuba(p,q)
adbc = pq-ac-bd
return ((10^len*a*c) + (10^(len/2)*adbc) + (b*d))
}
ksuba(1234,1234)
library(microbenchmark)
library(gmp)
ksuba = function(x,y) {
if ((x < 10) | (y < 10)) {return (x*y)}
temp_x = as.numeric(strsplit(as.character(x), "")[[1]])
temp_y = as.numeric(strsplit(as.character(y), "")[[1]])
len = length(temp_x)
a = temp_x[1:(len/2)]
b = temp_x[(len/2)+1:(len-len/2)]
c = temp_y[1:(len/2)]
d = temp_y[(len/2)+1:(len-len/2)]
a = as.integer(paste(a,collapse = ''))
b = as.integer(paste(b,collapse = ''))
c = as.integer(paste(c,collapse = ''))
d = as.integer(paste(d,collapse = ''))
p = a+b
q = c+d
ac = ksuba(a,c)
bd = ksuba(b,d)
pq = ksuba(p,q)
adbc = pq-ac-bd
return ((10^len*ac) + (10^(len/2)*adbc) + (bd))
}
ksuba(1234,1234)
ksuba(1234567812345678,1234567812345678
)
ksuba(12345678123456781234567812345678,12345678123456781234567812345678)
fib = function(n) {
if n = 0 { return(0)
}
fib = function(n) {
if n = 0 { return(0)}
}
fib = function(n) {
if (n = 0) { return(0)}
}
fib = function(n) {
if (n = 0) { return(0) }
}
fib = function(n) {
if (n == 0) { return(0) }
}
fib(2)
fib(0)
library(devtools)
install.packages("devtools")
library(devtools)
install_github("OpenIntroOrg/openintro-r-package", subdir = "OIdata")
library(OIdata)
data()
install_github("OpenIntroOrg/openintro-r-package", subdir = "OIdata")
install_github("OpenIntroOrg/openintro-r-package", subdir = "OIsurv")
data()
library(OIsurv)
dat()
data()
install_github("OpenIntroOrg/openintro-r-package", subdir = "openintro")
library(openintro)
data()
head(yrbss)
install.packages(c("swirl", "swirlify"))
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/OIstats/OpenIntro_Statistics_R_swirl")
library(swirlify)
new_lesson(lesson_name = 'Variability in estimates',course_name = 'Foundations for inference')
new_lesson(lesson_name = 'Confidence intervals',course_name = 'Foundations for inference')
add_to_manifest()
get_current_lesson()
set_lesson('Foundations_for_inference/Variability_in_estimates/lesson.yaml')
add_to_manifest()
demo_lesson()
demo_lesson()
install.packages("devtools")
library(swirlify)
demo_lesson('Foundations_for_inference/Variability_in_estimates/lesson.yaml')
demo_lesson()
install.packages("devtools")
library(swirlify)
demo_lesson()
exit()
0
bye
exit()
exit()
1
2
bye
bye()
resume()
exit
exit()
(0)
info()
info()
info
nrow(yrbss)
quit
quit()
